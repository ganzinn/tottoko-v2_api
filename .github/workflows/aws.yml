name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-northeast-1                  # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: tottoko_api                 # set this to your Amazon ECR repository name
  ECS_SERVICE: tottoko-prod-service           # set this to your Amazon ECS service name
  ECS_CLUSTER: tottoko-prod-cluster           # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: task-definition.json   # set this to the path to your Amazon ECS task definition
                                              # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: tottoko-api                 # set this to the name of the container in the
                                              # containerDefinitions section of your task definition

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}

        MYSQL_ROOT_PASSWORD: password
        MYSQL_USER: dbuser
        MYSQL_PASSWORD: password
        DB_HOST: db
        FRONT_URL: http://localhost:8080
        API_URL: http://localhost:3000
        RAILS_ENV: development
        RAILS_LOG_TO_STDOUT: true
        COOKIES_SAME_SITE: lax
        RAILS_MASTER_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .


        docker-compose -f docker-compose.ci.yml up -d
        sleep 15
        docker-compose -f docker-compose.ci.yml exec -T api mysql -u root -ppassword -h db -e "grant select, insert, update, delete, create, drop, references, index, alter, trigger on *.* to 'dbuser'@'%';"
        docker-compose -f docker-compose.ci.yml exec -T api rails db:create
        docker-compose -f docker-compose.ci.yml exec -T api rails db:migrate
        docker-compose -f docker-compose.ci.yml exec -T api bundle exec rspec


        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: false # false → デプロイの結果を待たない設定（時間短縮）
