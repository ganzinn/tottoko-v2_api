name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-northeast-1
  ECR_REPOSITORY: tottoko_api
  ECS_SERVICE: tottoko-prod-service
  ECS_CLUSTER: tottoko-prod-cluster
  ECS_TASK_DEFINITION: task-definition.json
  CONTAINER_NAME: tottoko-api

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: build image
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} .
        echo "::set-output name=image::${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"

    - name: Test
      env:
        TARGET_IMAGE: ${{ steps.build-image.outputs.image }}
        MYSQL_ROOT_PASSWORD: password
        MYSQL_USER: dbuser
        DB_PORT: 3308
        RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
      run: |
        docker-compose -f docker-compose.ci.yml up -d db
        sleep 15 # DB起動待ち
        mysql -u root -p${MYSQL_ROOT_PASSWORD} -h 127.0.0.1 -P ${DB_PORT} << EOS
        grant select, insert, update, delete, create, drop, references, index, alter, trigger on *.* to "${MYSQL_USER}"@'%';
        EOS
        docker-compose -f docker-compose.ci.yml run api rails db:create
        docker-compose -f docker-compose.ci.yml run api rails db:migrate
        docker-compose -f docker-compose.ci.yml run api bundle exec rspec
    
    - name: Push image to Amazon ECR
      run: |
        docker push ${{ steps.build-image.outputs.image }}
        
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: false # false → デプロイの結果を待たない設定（時間短縮）
